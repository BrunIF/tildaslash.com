#!/bin/bash

# Rdiff wrapper script to provide locking, and monitoring to rdiff-backup
# Author: Daniel Hall <daniel@danielhall.me>

# Execution: ./wrap_rdiff server.name.com.au /directory/to/backup

# TODO:
#   - Getopt command line parsing
#   - More control over rdiff-backup

# Command line args
ME="$(basename $0)"
HOST="$1"
DIR="$2"

# Config
BACKDIR=/opt/backups
NAGHOST=monitor01.int.tildaslash.com

# Executables
SENDNSCA=/usr/local/bin/send_nsca
MKDIR=/bin/mkdir
RDIFFBACKUP=/bin/rdiff-backup

# Check for root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# Get a lock
LOCKFILE="/tmp/${ME}-${HOST}-$(echo ${DIR} | tr / _)"
if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; 
then
  # Remove the lock file if we get killed
  trap 'rm -f "$lockfile"; exit $?' INT TERM EXIT

  # Make a directory for the backup
  $MKDIR -p ${BACKDIR}/${HOST}${DIR}
  
  # Perform the rdiff backup
  $RDIFFBACKUP ${HOST}::${DIR} ${BACKDIR}/${HOST}${DIR}

  # We've done our tricky bit, unlock
  rm -f "$LOCKFILE"
  trap - INT TERM EXIT

  # Tell nagios
  if [[ $? -eq 0 ]]; then
    STATUS='completed'
    RETURN=0 # OK
  else
    STATUS='failed'
    RETURN=2 # CRITICAL
  fi
else
  STATUS='could not get lock'
  RETURN=2 # CRITICAL
fi

echo -e "$(hostname -s)\tBackup-${HOST}-${DIR}\t${RETURN}\tBackup ${STATUS} at $(date)\n" | $SENDNSCA -H ${NAGHOST} > /dev/null

